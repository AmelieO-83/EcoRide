{# templates/home/connexion.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Connexion | EcoRide{% endblock %}

{% block body %}
<div class="container mt-5 d-flex justify-content-center">
  <div class="card p-4 shadow" style="max-width:400px; width:100%;">
    <h2 class="text-center mb-4">Se connecter</h2>

    {# Affiche l’erreur si identifiants invalides #}
    {% if error %}
      <div class="alert alert-danger">
        {{ error.messageKey|trans(error.messageData, 'security') }}
      </div>
    {% endif %}

    <div id="errorBox" class="alert alert-danger d-none"></div>
    <form id="loginForm" action="{{ path('connexion') }}" method="post">
      {# CSRF token #}
      <input type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}">

      <div class="mb-3">
        <label for="username" class="form-label">Adresse email</label>
        <input
          type="email"
          id="username"
          name="_username"
          class="form-control"
          required
          autofocus
          value="{{ last_username }}"
        >
      </div>

      <div class="mb-3">
        <label for="password" class="form-label">Mot de passe</label>
        <input
          type="password"
          id="password"
          name="_password"
          class="form-control"
          required
        >
      </div>

      <button type="submit" class="btn btn-primary w-100">Se connecter</button>
    </form>

    <div class="mt-3 text-center">
      <a href="{{ path('inscription') }}">Pas de compte ? Inscrivez-vous</a>
    </div>
  </div>
</div>
{% block javascripts %}
<script>
document.getElementById('loginForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const email    = document.getElementById('username').value;
  const password = document.getElementById('password').value;
  const errorBox = document.getElementById('errorBox');

  try {
    const resp = await fetch('{{ path("api_utilisateurs_connexion") }}', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });
    const data = await resp.json();

    if (resp.ok) {
      // tu peux stocker le token, puis rediriger
      localStorage.setItem('ecoride_token', data.apiToken);
      window.location.href = '{{ path("api_utilisateurs_profil") }}';
    } else {
      // affiche l'erreur renvoyée par l'API
      errorBox.textContent = data.error || 'Erreur inconnue';
      errorBox.classList.remove('d-none');
    }
  } catch (err) {
    console.error(err);
    errorBox.textContent = 'Impossible de contacter le serveur.';
    errorBox.classList.remove('d-none');
  }
});
</script>
{% endblock %}
{% endblock %}
