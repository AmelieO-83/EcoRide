{# templates/base.html.twig #}
<!DOCTYPE html>
<html lang="fr" xml:lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{% block title %}EcoRide{% endblock %}</title>
  <link rel="icon" href="{{ asset('images/EcoRide_logo.png') }}">

  {# Bootstrap CSS #}
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css"
    rel="stylesheet"
    integrity="sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr"
    crossorigin="anonymous"
  >

  {# Variables CSS (couleurs, fonts) #}
  <link rel="stylesheet" href="{{ asset('css/variables.css') }}">
  {# Style global #}
  <link rel="stylesheet" href="{{ asset('css/style.css') }}">
  {% block stylesheets %}{% endblock %}

  {# Google Fonts #}
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap" rel="stylesheet">
  {# Bootstrap Icons #}
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
</head>
<body>
  <nav class="navbar navbar-expand-lg" style="background-color:#F2EDE4;border-bottom:1px solid #ece7df;">
    <div class="container-fluid">
      <a class="navbar-brand" href="{{ path('accueil') }}">
        <img src="{{ asset('images/EcoRide_logo.png') }}" alt="EcoRide Logo" height="38">
      </a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarEcoride">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarEcoride">
        <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
          <li class="nav-item"><a class="nav-link" href="{{ path('accueil') }}">Accueil</a></li>
          <li class="nav-item"><a class="nav-link" href="{{ path('contact') }}">Contact</a></li>
          <li class="nav-item dropdown">
            <button class="nav-link dropdown-toggle fs-3 bg-transparent border-0" id="authDropdown" type="button" data-bs-toggle="dropdown" aria-expanded="false" onkeydown="if(event.key==='Enter'||event.key===' '){this.click();}">
              <i class="bi bi-person-lines-fill"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-end" id="authMenu" aria-labelledby="authDropdown">
              <li id="menuConnexion"><a class="dropdown-item" href="{{ path('connexion') }}">Connexion</a></li>
              <li id="menuInscription"><a class="dropdown-item" href="{{ path('inscription') }}">Inscription</a></li>
              {# Utilisateur simple #}
              <li id="menuMoncompte" class="d-none"><a class="dropdown-item" href="{{ path('mon_compte') }}">Mon compte</a></li>
              {# Employé #}
              <li id="menuEmploye" class="d-none"><a class="dropdown-item" href="{{ path('employe_avis') }}">Espace Employé</a></li>
              {# Admin #}
              <li id="menuAdmin" class="d-none"><a class="dropdown-item" href="{{ path('admin') }}">Espace Admin</a></li>
              <li id="menuDeconnexion" class="d-none"><a class="dropdown-item" href="#" id="logoutLink">Déconnexion</a></li>
            </ul>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  {# === FLASH MESSAGES (centré en haut, Bootstrap 5) === #}
  <div id="flash-container"
       class="position-fixed top-0 start-50 translate-middle-x mt-3"
       style="z-index:1080; max-width:720px; width:calc(100% - 2rem);">
    {% set bs = { 'success':'success', 'error':'danger', 'warning':'warning', 'info':'info' } %}
    {% for label, messages in app.flashes %}
      {% set type = bs[label] ?? 'secondary' %}
      {% for message in messages %}
        <div class="alert alert-{{ type }} alert-dismissible fade show shadow" role="alert">
          {{ message }}
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fermer"></button>
        </div>
      {% endfor %}
    {% endfor %}
  </div>

  <main>{% block body %}{% endblock %}</main>

  <footer class="container-fluid d-flex justify-content-between align-items-center py-2" style="background:#f2ede4;font-size:0.96em;">
    <a class="ms-2" style="color:#666;" href="mailto:contact@ecoride.com">contact@ecoride.com</a>
    <a href="{{ path('mentions_legales') }}" class="me-2" style="color:#666;text-decoration:underline;">Mentions légales</a>
  </footer>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js"
          integrity="sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q"
          crossorigin="anonymous"></script>

  {# ======= AUTH DROPDOWN SCRIPT ======= #}
  <script>
  document.addEventListener('DOMContentLoaded', async () => {
    const token       = localStorage.getItem('ecoride_token');
    const menuConn    = document.getElementById('menuConnexion');
    const menuInscr   = document.getElementById('menuInscription');
    const menuUser    = document.getElementById('menuMoncompte');
    const menuEmp     = document.getElementById('menuEmploye');
    const menuAdm     = document.getElementById('menuAdmin');
    const menuLogout  = document.getElementById('menuDeconnexion');
    const logoutLink  = document.getElementById('logoutLink');

    if (!token) return; // pas connecté

    // 1. Masquer les liens publics
    menuConn.classList.add('d-none');
    menuInscr.classList.add('d-none');

    // 2. Récupérer le profil pour connaître ses rôles
    let profile;
    try {
      const resp = await fetch('{{ path("api_utilisateurs_profil") }}', {
        headers: { 'X-AUTH-TOKEN': token, 'Accept': 'application/json' }
      });
      if (!resp.ok) throw new Error();
      profile = await resp.json();
    } catch {
      localStorage.removeItem('ecoride_token');
      return location.reload();
    }

    // 3. Afficher le bon lien selon le rôle
    if (profile.roles.includes('ROLE_ADMIN')) {
      menuAdm.querySelector('a').href = '{{ path("admin") }}';
      menuAdm.classList.remove('d-none');
    } else if (profile.roles.includes('ROLE_EMPLOYE')) {
      menuEmp.querySelector('a').href = '{{ path("employe_avis") }}';
      menuEmp.classList.remove('d-none');
    } else {
      menuUser.querySelector('a').href = '{{ path("mon_compte") }}';
      menuUser.classList.remove('d-none');
    }

    // 4. Déconnexion
    menuLogout.classList.remove('d-none');
    logoutLink.addEventListener('click', async e => {
      e.preventDefault();
      try {
        await fetch('{{ path("api_utilisateurs_deconnexion") }}', { method: 'POST', headers: { 'X-AUTH-TOKEN': token } });
      } catch {}
      localStorage.removeItem('ecoride_token');
      window.location.href = '{{ path("accueil") }}';
    });
  });
  </script>

  {# ======= FLASH HELPER (fetch-friendly) ======= #}
  <script>
  function showFlash(type, message, timeoutMs = 4000) {
    const map = { success:'success', error:'danger', warning:'warning', info:'info' };
    const t = map[type] ?? 'secondary';
    const c = document.getElementById('flash-container'); if (!c) return;

    const el = document.createElement('div');
    el.className = `alert alert-${t} alert-dismissible fade show shadow`;
    el.setAttribute('role', 'alert');
    el.innerHTML = `${message}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fermer"></button>`;
    c.appendChild(el);

    setTimeout(() => { try { bootstrap.Alert.getOrCreateInstance(el).close(); } catch(e){} }, timeoutMs);
  }

  // Lit ?participation=... et affiche le flash correspondant
  document.addEventListener('DOMContentLoaded', () => {
    const params = new URLSearchParams(location.search);
    const p = params.get('participation'); // success | conflict | noplaces | nocredit
    if (!p) return;

    const messages = {
      success:  'Votre participation a bien été enregistrée.',
      conflict: 'Vous participez déjà à ce trajet.',
      noplaces: 'Plus de places disponibles.',
      nocredit: 'Crédits insuffisants.'
    };
    const type = p === 'success' ? 'success' : 'warning';
    showFlash(type, messages[p] ?? 'Action effectuée.');

    // Nettoie l’URL
    params.delete('participation');
    const qs = params.toString();
    history.replaceState(null, '', location.pathname + (qs ? '?' + qs : ''));
  });
  </script>

  {% block javascripts %}{% endblock %}
</body>
</html>
