{# templates/covoiturages/proposer.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Proposer un trajet | EcoRide{% endblock %}

{% block body %}
<div class="container mt-5" style="max-width:600px;">
  <h2 class="mb-4">Proposez un trajet</h2>
  <div id="message" class="alert d-none"></div>
  <form id="proposeForm">
    <div class="mb-3">
      <label for="villeDepart" class="form-label">Ville de départ</label>
      <input type="text" id="villeDepart" name="villeDepart" class="form-control" required>
    </div>
    <div class="mb-3">
      <label for="villeArrivee" class="form-label">Ville d'arrivée</label>
      <input type="text" id="villeArrivee" name="villeArrivee" class="form-control" required>
    </div>
    <div class="mb-3">
      <label for="dateDepart" class="form-label">Date de départ</label>
      <input type="date" id="dateDepart" name="date" class="form-control" required>
    </div>
    <div class="mb-3">
      <label for="heureDepart" class="form-label">Heure de départ</label>
      <input type="time" id="heureDepart" name="heureDepart" class="form-control" required>
    </div>
    <div class="mb-3">
      <label for="heureArrivee" class="form-label">Heure d'arrivée prévue</label>
      <input type="time" id="heureArrivee" name="heureArrivee" class="form-control" required>
    </div>
    <div class="mb-3">
      <label for="placesDisponibles" class="form-label">Places disponibles</label>
      <input type="number" id="placesDisponibles" name="placesDisponibles" class="form-control" min="1" required>
    </div>
    <div class="mb-3">
      <label for="prix" class="form-label">Prix par personne (crédits)</label>
      <input type="number" id="prix" name="prix" class="form-control" min="0" required>
    </div>
    <div class="mb-3">
      <label for="voitureSelect" class="form-label">Choisissez votre voiture</label>
      <select id="voitureSelect" name="voiture" class="form-select" required>
        <option value="">-- Sélectionnez --</option>
      </select>
    </div>
    <button type="submit" class="btn btn-primary w-100">Proposer</button>
  </form>
</div>
{% endblock %}

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', async () => {
  const token = localStorage.getItem('ecoride_token');
  if (!token) return window.location.href = '{{ path("connexion") }}';

  const selectVoiture = document.getElementById('voitureSelect');
  const form = document.getElementById('proposeForm');
  const msg  = document.getElementById('message');

  try {
    // 1. Chargement du profil pour récupérer l'id
    const prof = await fetch('{{ path("api_utilisateurs_profil") }}', {
      headers: { 'X-AUTH-TOKEN': token }
    });
    if (!prof.ok) throw new Error('Profil introuvable');
    const user = await prof.json();

    // 2. Chargement des voitures
    const response = await fetch('{{ path("api_voitures_list") }}', {
      headers: { 'X-AUTH-TOKEN': token }
    });

    if (!response.ok) {
      throw new Error(`Erreur lors du chargement des voitures (HTTP ${response.status})`);
    }

    const voitures = await response.json();

    voitures.forEach(v => {
      const opt = document.createElement('option');
      opt.value = v.id;
      const marqueLabel = v.marque?.libelle || '';
      opt.textContent = `${marqueLabel} ${v.modele} (${v.energie}, ${v.couleur})`;
      selectVoiture.appendChild(opt);
    });
  } catch (err) {
    console.error(err);
    msg.className = 'alert alert-danger';
    msg.textContent = 'Impossible de charger vos voitures.';
    msg.classList.remove('d-none');
    return;
  }

  // 3. Soumission du formulaire
  form.addEventListener('submit', async e => {
    e.preventDefault();
    msg.classList.add('d-none');

    const payload = {
      villeDepart:       form.villeDepart.value.trim(),
      villeArrivee:      form.villeArrivee.value.trim(),
      date:              form.date.value,
      heureDepart:       form.heureDepart.value,
      heureArrivee:      form.heureArrivee.value,
      placesDisponibles: parseInt(form.placesDisponibles.value, 10),
      prix:              parseFloat(form.prix.value),
      voiture:           parseInt(form.voiture.value, 10)
    };

    try {
      const resp = await fetch('{{ path("api_covoiturages_create") }}', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-AUTH-TOKEN': token
        },
        body: JSON.stringify(payload)
      });

      if (resp.ok) {
        // success → redirection vers détail du trajet
        const traj = await resp.json();
        // l'API renvoie un JSON, possibilité de lire le Location header:
        const loc = resp.headers.get('Location');
        window.location.href = loc || `{{ path('trajet_show', {'id':'__ID__'}) }}`.replace('__ID__', JSON.parse(traj).id);
      } else {
        const err = await resp.json();
        throw new Error(err.error || 'Erreur inconnue');
      }
    } catch (err) {
      msg.className = 'alert alert-danger';
      msg.textContent = err.message;
      msg.classList.remove('d-none');
    }
  });
});
</script>
{% endblock %}
