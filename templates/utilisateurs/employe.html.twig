{% extends 'base.html.twig' %}
{% block title %}Profil employé - Validation des avis | EcoRide{% endblock %}

{% block body %}
  <div class="container mt-5">
    <h1>Avis à valider</h1>
    {# on place ici la liste vide, qu’on remplira en JS #}
    <ul id="avisList" class="list-group"></ul>
  </div>
{% endblock %}

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', async () => {
  // 0. On vérifie qu'on est authentifié
  const token = localStorage.getItem('ecoride_token');
  if (!token) return window.location.href = '{{ path("connexion") }}';

  // 1. Récupération des avis via l'API
  let avis;
  try {
    const resp = await fetch('{{ path("api_avis_list") }}', {
      headers: {
        'X-AUTH-TOKEN': token,
        'Accept': 'application/json'
      }
    });
    if (!resp.ok) throw new Error('API indisponible');
    avis = await resp.json();
  } catch (e) {
    document.getElementById('avisList').innerHTML = 
      '<div class="alert alert-danger">Impossible de charger les avis.</div>';
    return;
  }

  const container = document.getElementById('avisList');
  // 2. Si aucun avis
  if (avis.length === 0) {
    container.innerHTML = 
      '<div class="alert alert-info">Aucun avis en attente de validation.</div>';
    return;
  }

  // 3. On génère le HTML de chaque avis
  container.innerHTML = avis.map(a => `
    <li class="list-group-item d-flex justify-content-between align-items-center">
      <div>
        <strong>${a.note}/5</strong> par ${a.auteur.prenom}<br>
        <small>${a.commentaire}</small>
      </div>
      <div>
        <button class="btn btn-success btn-sm me-2 js-validate" data-id="${a.id}">
          Valider
        </button>
        <button class="btn btn-danger btn-sm js-reject" data-id="${a.id}">
          Rejeter
        </button>
      </div>
    </li>
  `).join('');

  // 4. On attache les handlers pour valider/rejeter
  container.querySelectorAll('.js-validate, .js-reject').forEach(btn => {
    btn.addEventListener('click', async e => {
      const id     = e.currentTarget.dataset.id;
      const action = e.currentTarget.classList.contains('js-validate')
        ? 'valider'
        : 'rejeter';
      const url = `/api/avis/${id}/${action}`;
      const resp = await fetch(url, {
        method: 'PUT',
        headers: { 'X-AUTH-TOKEN': token }
      });
      if (resp.ok) {
        e.currentTarget.closest('li').remove();
      } else {
        alert('Erreur lors de la validation/rejet');
      }
    });
  });
});
</script>
{% endblock %}
