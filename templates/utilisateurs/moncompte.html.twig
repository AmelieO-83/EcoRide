{# templates/utilisateurs/moncompte.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Mon Compte | EcoRide{% endblock %}

{% block stylesheets %}
  {{ parent() }}
  <style>
    /* Onglets personnalisés */
    .nav-tabs .nav-link {
      color: var(--couleur-texte-sombre) !important;
      background: transparent !important;
      border: 1px solid #e0e0e0 !important;
      transition: color .2s, background .2s;
      border-radius: .75rem .75rem 0 0;
      margin-right: .25rem;
      font-weight: 600;
      letter-spacing: .5px;
      font-family: var(--font-sans);
    }
    .nav-tabs .nav-link.active {
      color: var(--couleur-texte-clair) !important;
      background-color: var(--couleur-primaire) !important;
      border-color: var(--couleur-primaire) var(--couleur-primaire) #fff !important;
    }
    .nav-tabs .nav-link:hover {
      color: var(--couleur-primaire) !important;
      background-color: var(--couleur-secondaire) !important;
    }

    /* Star-rating */
    .star-rating {
      font-size: 2rem;
      direction: rtl;
      display: inline-flex;
    }
    .star-rating input { display: none; }
    .star-rating label {
      cursor: pointer;
      color: #ccc;
      transition: color 0.2s;
    }
    .star-rating input:checked ~ label,
    .star-rating label:hover,
    .star-rating label:hover ~ label {
      color: var(--couleur-primaire);
    }
  </style>
{% endblock %}

{% block body %}
<div class="container mt-5" style="max-width:900px;">
  <ul class="nav nav-tabs mb-3" id="profilTabs" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="tab-profil" data-bs-toggle="tab" data-bs-target="#pane-profil" type="button" role="tab">Mon profil</button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="tab-voitures" data-bs-toggle="tab" data-bs-target="#pane-voitures" type="button" role="tab">Mes voitures</button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="tab-trajets" data-bs-toggle="tab" data-bs-target="#pane-trajets" type="button" role="tab">Trajets proposés</button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="tab-participations" data-bs-toggle="tab" data-bs-target="#pane-participations" type="button" role="tab">Mes participations</button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="tab-avis" data-bs-toggle="tab" data-bs-target="#pane-avis" type="button" role="tab">Mes avis</button>
    </li>
  </ul>

  <div class="tab-content" id="profilTabsContent">
    {# Profil #}
    <div class="tab-pane fade show active" id="pane-profil" role="tabpanel">
      <h2 class="mb-4">Mon profil</h2>
      <div id="message" class="alert d-none"></div>
      <form id="profileForm">
        <div class="mb-3">
          <label for="prenom" class="form-label">Prénom</label>
          <input type="text" id="prenom" class="form-control" required>
        </div>
        <div class="mb-3">
          <label for="nom" class="form-label">Nom</label>
          <input type="text" id="nom" class="form-control" required>
        </div>
        <div class="mb-3">
          <label for="email" class="form-label">Email</label>
          <input type="email" id="email" class="form-control" required>
        </div>
        <div class="mb-3">
          <label for="ville" class="form-label">Ville</label>
          <input type="text" id="ville" class="form-control">
        </div>
        <div class="mb-3">
          <label for="dateNaissance" class="form-label">Date de naissance</label>
          <input type="date" id="dateNaissance" class="form-control">
        </div>
        <div class="mb-3">
          <label for="password" class="form-label">Nouveau mot de passe</label>
          <input type="password" id="password" class="form-control">
          <div class="form-text">Laissez vide pour ne pas modifier.</div>
        </div>
        <button type="submit" class="btn btn-primary w-100">Enregistrer</button>
      </form>
    </div>

    {# Voitures #}
    <div class="tab-pane fade" id="pane-voitures" role="tabpanel">
      <h2 class="mb-3">Mes voitures</h2>
      <div id="carList" class="list-group mb-2"></div>
      <a href="{{ path('voiture_ajouter') }}" class="btn btn-primary">Ajouter une voiture</a>
    </div>

    {# Trajets proposés #}
    <div class="tab-pane fade" id="pane-trajets" role="tabpanel">
      <h2 class="mb-3">Trajets proposés</h2>
      <div id="listeProposes" class="list-group mb-2"></div>
      <a href="{{ path('proposer_trajet') }}" class="btn btn-primary">Proposer un covoiturage</a>
    </div>

    {# Participations #}
    <div class="tab-pane fade" id="pane-participations" role="tabpanel">
      <h3 class="mt-4">Participations en cours</h3>
      <div id="listeParticipeEnCours" class="list-group mb-4"></div>
      <h3>Participations terminées</h3>
      <div id="listeParticipeTerminees" class="list-group mb-2"></div>
      <a href="{{ path('covoiturages_list') }}" class="btn btn-primary">Rechercher un covoiturage</a>
    </div>

    {# Avis #}
    <div class="tab-pane fade" id="pane-avis" role="tabpanel">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Mes avis</h2>
        <span id="avisAverage" class="fw-bold text-primary"></span>
      </div>
      <div id="listeAvis" class="list-group mb-2"></div>
    </div>
  </div>
</div>

{# Modal pour laisser un avis après confirmation #}
<div class="modal fade" id="avisModal" tabindex="-1">
  <div class="modal-dialog">
    <form id="avisForm" class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Laisser un avis</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <input type="hidden" id="avisCovoiturageId">
        <div class="mb-3 star-rating">
          {% for i in 5..1 %}
            <input type="radio" name="avisNote" id="star{{ i }}" value="{{ i }}" required>
            <label for="star{{ i }}" title="{{ i }} étoiles">★</label>
          {% endfor %}
        </div>
        <div class="mb-3">
          <label for="avisCommentaire" class="form-label">Commentaire</label>
          <textarea id="avisCommentaire" class="form-control" rows="3" required></textarea>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
        <button type="submit" class="btn btn-primary">Envoyer l’avis</button>
      </div>
    </form>
  </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
(async () => {
  // Récupération du token et en-têtes de base
  const token = localStorage.getItem('ecoride_token');
  if (!token) return window.location.href = '{{ path("connexion") }}';
  const headers = { 'X-AUTH-TOKEN': token, 'Accept': 'application/json' };
  const fetchJson = (url, opts = {}) =>
    fetch(url, { ...opts, headers }).then(r => r.ok ? r.json() : []);

  // ─ PROFIL ─
  const user = await fetchJson('{{ path("api_utilisateurs_profil") }}');
  if (!user) return window.location.href = '{{ path("connexion") }}';
  const currentUserId = user.id;
  ['prenom','nom','email','ville','dateNaissance'].forEach(f => {
    const el = document.getElementById(f);
    el.value = f === 'dateNaissance' && user[f]
      ? user[f].split('T')[0]
      : (user[f] || '');
  });
  document.getElementById('profileForm').addEventListener('submit', async e => {
    e.preventDefault();
    const payload = {
      prenom: document.getElementById('prenom').value.trim(),
      nom:    document.getElementById('nom').value.trim(),
      email:  document.getElementById('email').value.trim(),
      ville:  document.getElementById('ville').value.trim(),
      dateNaissance: document.getElementById('dateNaissance').value
    };
    const pwd = document.getElementById('password').value;
    if (pwd) payload.password = pwd;
    const res = await fetch('{{ path("api_utilisateurs_modifier") }}', {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...headers },
      body: JSON.stringify(payload)
    });
    const msg = document.getElementById('message');
    if (res.ok) {
      msg.className = 'alert alert-success';
      msg.textContent = 'Profil mis à jour.';
    } else {
      const err = await res.json().catch(() => ({}));
      msg.className = 'alert alert-danger';
      msg.textContent = err.error || 'Erreur lors de la mise à jour.';
    }
    msg.classList.remove('d-none');
  });

  // ─ VOITURES ─
  const cars = await fetchJson('{{ path("api_voitures_list") }}');
  document.getElementById('carList').innerHTML = cars.length
    ? cars.map(v => `
        <div class="list-group-item d-flex justify-content-between">
          <span>${v.marque.libelle} ${v.modele} – ${v.couleur}</span>
          <a href="#" class="text-danger link-delete-car" data-id="${v.id}">Supprimer</a>
        </div>
      `).join('')
    : '<div class="text-muted">Aucune voiture.</div>';
  document.getElementById('carList').addEventListener('click', async e => {
    if (!e.target.matches('.link-delete-car')) return;
    e.preventDefault();
    if (!confirm('Supprimer cette voiture ?')) return;
    const r = await fetch(
      `{{ path("api_voitures_delete",{"id":"ID"}) }}`.replace('ID', e.target.dataset.id),
      { method: 'DELETE', headers }
    );
    if (r.ok) location.reload(); else alert('Erreur');
  });

  // ─ TRAJETS PROPOSÉS (sans ses propres) ─
  async function loadTrajets() {
    const t = await fetchJson('{{ path("api_covoiturages_proposes") }}');
    document.getElementById('listeProposes').innerHTML = t
      .filter(c => c.chauffeur.id !== currentUserId)
      .map(c => `
        <div class="list-group-item d-flex justify-content-between">
          <span>${c.villeDepart} → ${c.villeArrivee} le ${c.date}</span>
          <a href="#" class="text-danger link-annuler-trajet" data-id="${c.id}">Annuler</a>
        </div>
      `).join('') || '<div class="text-muted">Aucun covoiturage proposé.</div>';
  }
  await loadTrajets();
  document.getElementById('listeProposes').addEventListener('click', async e => {
    if (!e.target.matches('.link-annuler-trajet')) return;
    e.preventDefault();
    if (!confirm('Annuler ce trajet ?')) return;
    const r = await fetch(`/api/covoiturages/${e.target.dataset.id}`, { method: 'DELETE', headers });
    if (r.ok) loadTrajets(); else alert('Erreur');
  });

  // ─ PARTICIPATIONS & CONFIRMATION ─
  async function loadParticipations() {
    const p = await fetchJson('{{ path("api_participation_list") }}');
    const enCours = p.filter(o => !o.confirme);
    const terminees = p.filter(o => o.confirme);

    // en cours
    document.getElementById('listeParticipeEnCours').innerHTML = enCours.length
      ? enCours.map(o => `
          <div class="list-group-item d-flex justify-content-between">
            <div>
              <strong>${o.covoiturage.villeDepart} → ${o.covoiturage.villeArrivee}</strong>
              <br><small>le ${o.covoiturage.date}</small>
            </div>
            <div>
              <a href="#" class="text-danger link-annuler-part" data-id="${o.id}">Annuler</a>
              <a href="#" class="text-success link-termine-part"
                 data-id="${o.id}" data-covoiturage-id="${o.covoiturage.id}">
                Terminé
              </a>
            </div>
          </div>
        `).join('')
      : '<div class="text-muted">Aucune participation en cours.</div>';

    // terminées
    document.getElementById('listeParticipeTerminees').innerHTML = terminees.length
      ? terminees.map(o => `
          <div class="list-group-item">
            <strong>${o.covoiturage.villeDepart} → ${o.covoiturage.villeArrivee}</strong>
            <br><small>le ${o.covoiturage.date}</small>
          </div>
        `).join('')
      : '<div class="text-muted">Aucune participation terminée.</div>';
  }
  await loadParticipations();

  document.getElementById('listeParticipeEnCours').addEventListener('click', async e => {
    if (e.target.matches('.link-annuler-part')) {
      e.preventDefault();
      if (!confirm('Annuler cette participation ?')) return;
      const r = await fetch(`/api/participations/${e.target.dataset.id}`, { method: 'DELETE', headers });
      if (r.ok) loadParticipations(); else alert('Erreur');
      return;
    }
    if (e.target.matches('.link-termine-part')) {
      e.preventDefault();
      const participationId = e.target.dataset.id;
      const rc = await fetch(`/api/participations/${participationId}/confirmer`, {
        method: 'POST',
        headers
      });
      if (!rc.ok) {
        const err = await rc.json().catch(() => ({}));
        return alert(err.error || 'Impossible de confirmer ce trajet.');
      }
      await loadParticipations();
      document.getElementById('avisCovoiturageId').value = e.target.dataset.covoiturageId;
      document.querySelectorAll('input[name="avisNote"]').forEach(i => i.checked = false);
      document.getElementById('avisCommentaire').value = '';
      new bootstrap.Modal(document.getElementById('avisModal')).show();
    }
  });

  // ─ AVIS ─
  async function loadAvisRecus() {
    console.log('→ chargement des avis…');
    const avis = await fetchJson('{{ path("api_avis_recus") }}');
    console.log('réponse avis:', avis);
    const moyenne = avis.length
      ? avis.reduce((sum, a) => sum + a.note, 0) / avis.length
      : 0;
    document.getElementById('avisAverage').textContent = avis.length
      ? `Moyenne : ${moyenne.toFixed(1)}/5 (${avis.length} avis)`
      : 'Aucun avis.';
    document.getElementById('listeAvis').innerHTML = avis.length
      ? avis.map(a => `
          <div class="list-group-item">
            <strong>Note : ${a.note}/5</strong>
            <div class="small text-muted">${new Date(a.dateCreation).toLocaleDateString()}</div>
            <p>${a.commentaire}</p>
          </div>
        `).join('')
      : '<div class="text-muted">Aucun avis.</div>';
  }

  document.getElementById('tab-avis')
    .addEventListener('shown.bs.tab', loadAvisRecus);

  // si déjà actif au chargement
  if (document.querySelector('#tab-avis.active')) {
    loadAvisRecus();
  }

  // Soumission du formulaire d’avis
  document.getElementById('avisForm').addEventListener('submit', async e => {
    e.preventDefault();
    const noteEl = document.querySelector('input[name="avisNote"]:checked');
    if (!noteEl) return alert('Note requise');
    const note = parseInt(noteEl.value, 10);
    const commentaire = document.getElementById('avisCommentaire').value.trim();
    const covoiturageId = document.getElementById('avisCovoiturageId').value;

    const r = await fetch('{{ path("api_avis_create") }}', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-AUTH-TOKEN': token
      },
      body: JSON.stringify({ covoiturageId, note, commentaire })
    });

    if (!r.ok) {
      const err = await r.json().catch(() => ({}));
      return alert(err.error || 'Erreur lors de l’envoi de l’avis.');
    }

    bootstrap.Modal.getInstance(document.getElementById('avisModal')).hide();
    alert('Avis envoyé, en attente de validation.');

    // recharge les participations et bascule sur l’onglet Avis
    await loadParticipations();
    document.getElementById('tab-avis').click();
  });

})();
</script>
{% endblock %}
